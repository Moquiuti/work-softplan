/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, ElementRef, Input, Output, forwardRef, Renderer2, EventEmitter, Optional, Inject, } from '@angular/core';
import { NG_VALUE_ACCESSOR, COMPOSITION_BUFFER_MODE } from '@angular/forms';
import { ɵgetDOM as getDOM } from '@angular/platform-browser';
// TODO import only types when ts 3.8 released or when move IMask to ts
import IMask from 'imask';
/**
 * @return {?}
 */
function _isAndroid() {
    /** @type {?} */
    var userAgent = getDOM() ? getDOM().getUserAgent() : '';
    return /android (\d+)/.test(userAgent.toLowerCase());
}
/** @type {?} */
export var MASKEDINPUT_VALUE_ACCESSOR = {
    provide: NG_VALUE_ACCESSOR,
    useExisting: forwardRef((/**
     * @return {?}
     */
    function () { return IMaskDirective; })),
    multi: true
};
/** @type {?} */
var DEFAULT_IMASK_ELEMENT = (/**
 * @param {?} elementRef
 * @return {?}
 */
function (elementRef) { return elementRef.nativeElement; });
var ɵ0 = DEFAULT_IMASK_ELEMENT;
/**
 * @template Opts
 */
var IMaskDirective = /** @class */ (function () {
    function IMaskDirective(_elementRef, _renderer, _compositionMode) {
        this._elementRef = _elementRef;
        this._renderer = _renderer;
        this._compositionMode = _compositionMode;
        // init here to support AOT (TODO may be will work with ng-packgr - need to check)
        this.onTouched = (/**
         * @return {?}
         */
        function () { });
        this.onChange = (/**
         * @return {?}
         */
        function () { });
        this.imaskElement = DEFAULT_IMASK_ELEMENT;
        this.accept = new EventEmitter();
        this.complete = new EventEmitter();
        this._viewInitialized = false;
        this._composing = false;
        this._writing = false;
        if (this._compositionMode == null) {
            this._compositionMode = !_isAndroid();
        }
    }
    Object.defineProperty(IMaskDirective.prototype, "element", {
        get: /**
         * @return {?}
         */
        function () {
            return this.imaskElement(this._elementRef, this);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(IMaskDirective.prototype, "maskValue", {
        get: /**
         * @return {?}
         */
        function () {
            if (!this.maskRef)
                return this.element.value;
            if (this.unmask === 'typed')
                return this.maskRef.typedValue;
            if (this.unmask)
                return this.maskRef.unmaskedValue;
            return this.maskRef.value;
        },
        set: /**
         * @param {?} value
         * @return {?}
         */
        function (value) {
            if (this.maskRef) {
                if (this.unmask === 'typed')
                    this.maskRef.typedValue = value;
                else if (this.unmask)
                    this.maskRef.unmaskedValue = value;
                else
                    this.maskRef.value = value;
            }
            else {
                this._renderer.setProperty(this.element, 'value', value);
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @return {?}
     */
    IMaskDirective.prototype.ngAfterViewInit = /**
     * @return {?}
     */
    function () {
        if (this.imask)
            this.initMask();
        this._viewInitialized = true;
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    IMaskDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (changes.elementRef && !this.imaskElement)
            this.imaskElement = DEFAULT_IMASK_ELEMENT;
        if (!changes.imask || !this._viewInitialized)
            return;
        if (this.imask) {
            if (this.maskRef)
                this.maskRef.updateOptions(this.imask);
            else {
                this.initMask();
                this.onChange(this.maskValue);
            }
        }
        else {
            this.destroyMask();
        }
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype.destroyMask = /**
     * @return {?}
     */
    function () {
        if (this.maskRef) {
            this.maskRef.destroy();
            delete this.maskRef;
        }
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.destroyMask();
        this.accept.complete();
        this.complete.complete();
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IMaskDirective.prototype.beginWrite = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._writing = true;
        this._writingValue = value;
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype.endWrite = /**
     * @return {?}
     */
    function () {
        this._writing = false;
        return this._writingValue;
    };
    /**
     * @param {?} value
     * @return {?}
     */
    IMaskDirective.prototype.writeValue = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        value = value == null ? '' : value;
        if (this.maskRef) {
            this.beginWrite(value);
            if (this.maskValue !== value ||
                // handle cases like Number('') === 0,
                // for details see https://github.com/uNmAnNeR/imaskjs/issues/134
                (typeof value !== 'string' && this.maskRef.value === '') &&
                    !this.maskRef.el.isActive) {
                this.maskValue = value;
            }
        }
        else {
            this._renderer.setProperty(this.element, 'value', value);
        }
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype._onAccept = /**
     * @return {?}
     */
    function () {
        /** @type {?} */
        var value = this.maskValue;
        // if value was not changed during writing don't fire events
        // for details see https://github.com/uNmAnNeR/imaskjs/issues/136
        if (this._writing && value === this.endWrite())
            return;
        this.onChange(value);
        this.accept.emit(value);
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype._onComplete = /**
     * @return {?}
     */
    function () {
        this.complete.emit(this.maskValue);
    };
    /**
     * @private
     * @return {?}
     */
    IMaskDirective.prototype.initMask = /**
     * @private
     * @return {?}
     */
    function () {
        this.maskRef = IMask(this.element, (/** @type {?} */ (this.imask)))
            .on('accept', this._onAccept.bind(this))
            .on('complete', this._onComplete.bind(this));
    };
    /**
     * @param {?} isDisabled
     * @return {?}
     */
    IMaskDirective.prototype.setDisabledState = /**
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this._renderer.setProperty(this.element, 'disabled', isDisabled);
    };
    /**
     * @param {?} fn
     * @return {?}
     */
    IMaskDirective.prototype.registerOnChange = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onChange = fn; };
    /**
     * @param {?} fn
     * @return {?}
     */
    IMaskDirective.prototype.registerOnTouched = /**
     * @param {?} fn
     * @return {?}
     */
    function (fn) { this.onTouched = fn; };
    /**
     * @param {?} value
     * @return {?}
     */
    IMaskDirective.prototype._handleInput = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        // if mask is attached all input goes throw mask
        if (this.maskRef)
            return;
        if (!this._compositionMode || (this._compositionMode && !this._composing)) {
            this.onChange(value);
        }
    };
    /**
     * @return {?}
     */
    IMaskDirective.prototype._compositionStart = /**
     * @return {?}
     */
    function () { this._composing = true; };
    /**
     * @param {?} value
     * @return {?}
     */
    IMaskDirective.prototype._compositionEnd = /**
     * @param {?} value
     * @return {?}
     */
    function (value) {
        this._composing = false;
        this._compositionMode && this._handleInput(value);
    };
    IMaskDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[imask]',
                    host: {
                        '(input)': '_handleInput($event.target.value)',
                        '(blur)': 'onTouched()',
                        '(compositionstart)': '_compositionStart()',
                        '(compositionend)': '_compositionEnd($event.target.value)'
                    },
                    providers: [MASKEDINPUT_VALUE_ACCESSOR]
                },] }
    ];
    /** @nocollapse */
    IMaskDirective.ctorParameters = function () { return [
        { type: ElementRef },
        { type: Renderer2 },
        { type: Boolean, decorators: [{ type: Optional }, { type: Inject, args: [COMPOSITION_BUFFER_MODE,] }] }
    ]; };
    IMaskDirective.propDecorators = {
        imask: [{ type: Input }],
        unmask: [{ type: Input }],
        imaskElement: [{ type: Input }],
        accept: [{ type: Output }],
        complete: [{ type: Output }]
    };
    return IMaskDirective;
}());
export { IMaskDirective };
if (false) {
    /** @type {?} */
    IMaskDirective.prototype.maskRef;
    /** @type {?} */
    IMaskDirective.prototype.onTouched;
    /** @type {?} */
    IMaskDirective.prototype.onChange;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._viewInitialized;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._composing;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._writingValue;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._writing;
    /** @type {?} */
    IMaskDirective.prototype.imask;
    /** @type {?} */
    IMaskDirective.prototype.unmask;
    /** @type {?} */
    IMaskDirective.prototype.imaskElement;
    /** @type {?} */
    IMaskDirective.prototype.accept;
    /** @type {?} */
    IMaskDirective.prototype.complete;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._elementRef;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._renderer;
    /**
     * @type {?}
     * @private
     */
    IMaskDirective.prototype._compositionMode;
}
export { ɵ0 };
//# sourceMappingURL=data:application/json;base64,