{"version":3,"sources":["ng://angular-imask/imask.directive.ts","ng://angular-imask/imask.pipe.ts","ng://angular-imask/imask.module.ts"],"names":["MASKEDINPUT_VALUE_ACCESSOR","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","IMaskDirective","multi","DEFAULT_IMASK_ELEMENT","elementRef","nativeElement","_elementRef","_renderer","_compositionMode","userAgent","this","onTouched","onChange","imaskElement","accept","EventEmitter","complete","_viewInitialized","_composing","_writing","getDOM","getUserAgent","test","toLowerCase","Object","defineProperty","prototype","maskRef","unmask","typedValue","unmaskedValue","value","element","setProperty","ngAfterViewInit","imask","initMask","ngOnChanges","changes","updateOptions","maskValue","destroyMask","destroy","ngOnDestroy","beginWrite","_writingValue","endWrite","writeValue","el","isActive","_onAccept","emit","_onComplete","IMask","on","bind","setDisabledState","isDisabled","registerOnChange","fn","registerOnTouched","_handleInput","_compositionStart","_compositionEnd","Directive","args","selector","host","(input)","(blur)","(compositionstart)","(compositionend)","providers","ElementRef","Renderer2","Optional","type","Inject","COMPOSITION_BUFFER_MODE","Input","Output","IMaskPipe","transform","_i","arguments","length","pipe","apply","__spread","Pipe","name","IMaskModule","NgModule","imports","CommonModule","declarations","exports"],"mappings":"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","sourcesContent":["import {\r\n  Directive, ElementRef, Input, Output, forwardRef, Provider, Renderer2,\r\n  EventEmitter, OnDestroy, OnChanges, AfterViewInit,\r\n  Optional, Inject, SimpleChanges,\r\n} from '@angular/core';\r\nimport { NG_VALUE_ACCESSOR, ControlValueAccessor, COMPOSITION_BUFFER_MODE } from '@angular/forms';\r\nimport { ÉµgetDOM as getDOM } from '@angular/platform-browser';\r\n// TODO import only types when ts 3.8 released or when move IMask to ts\r\nimport IMask from 'imask';\r\n\r\n\r\nfunction _isAndroid(): boolean {\r\n  const userAgent = getDOM() ? getDOM().getUserAgent() : '';\r\n  return /android (\\d+)/.test(userAgent.toLowerCase());\r\n}\r\n\r\n\r\nexport const MASKEDINPUT_VALUE_ACCESSOR: Provider = {\r\n  provide: NG_VALUE_ACCESSOR,\r\n  useExisting: forwardRef(() => IMaskDirective),\r\n  multi: true\r\n};\r\n\r\nconst DEFAULT_IMASK_ELEMENT = (elementRef: any) => elementRef.nativeElement;\r\n@Directive({\r\n  selector: '[imask]',\r\n  host: {\r\n    '(input)': '_handleInput($event.target.value)',\r\n    '(blur)': 'onTouched()',\r\n    '(compositionstart)': '_compositionStart()',\r\n    '(compositionend)': '_compositionEnd($event.target.value)'\r\n  },\r\n  providers: [MASKEDINPUT_VALUE_ACCESSOR]\r\n})\r\nexport class IMaskDirective<Opts extends IMask.AnyMaskedOptions> implements ControlValueAccessor, AfterViewInit, OnDestroy, OnChanges {\r\n  maskRef?: IMask.InputMask<Opts>;\r\n  onTouched: any;\r\n  onChange: any;\r\n  private _viewInitialized: boolean;\r\n  private _composing: boolean;\r\n  private _writingValue: any;\r\n  private _writing: boolean;\r\n\r\n  @Input() imask?: Opts;\r\n  @Input() unmask?: boolean|'typed';\r\n  @Input() imaskElement: (elementRef: ElementRef, directiveRef: any) => IMask.MaskElement;\r\n  @Output() accept: EventEmitter<any>;\r\n  @Output() complete: EventEmitter<any>;\r\n\r\n  constructor(private _elementRef: ElementRef,\r\n              private _renderer: Renderer2,\r\n              @Optional() @Inject(COMPOSITION_BUFFER_MODE) private _compositionMode: boolean) {\r\n    // init here to support AOT (TODO may be will work with ng-packgr - need to check)\r\n    this.onTouched = () => {};\r\n    this.onChange = () => {};\r\n    this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n    this.accept = new EventEmitter();\r\n    this.complete = new EventEmitter();\r\n    this._viewInitialized = false;\r\n    this._composing = false;\r\n    this._writing = false;\r\n\r\n    if (this._compositionMode == null) {\r\n      this._compositionMode = !_isAndroid();\r\n    }\r\n  }\r\n\r\n  get element () {\r\n    return this.imaskElement(this._elementRef, this);\r\n  }\r\n\r\n  get maskValue (): any {\r\n    if (!this.maskRef) return this.element.value;\r\n\r\n    if (this.unmask === 'typed') return this.maskRef.typedValue;\r\n    if (this.unmask) return this.maskRef.unmaskedValue;\r\n    return this.maskRef.value;\r\n  }\r\n\r\n  set maskValue (value: any) {\r\n    if (this.maskRef) {\r\n      if (this.unmask === 'typed') this.maskRef.typedValue = value;\r\n      else if (this.unmask) this.maskRef.unmaskedValue = value;\r\n      else this.maskRef.value = value;\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (this.imask) this.initMask();\r\n\r\n    this._viewInitialized = true;\r\n  }\r\n\r\n  ngOnChanges(changes: SimpleChanges) {\r\n    if (changes.elementRef && !this.imaskElement) this.imaskElement = DEFAULT_IMASK_ELEMENT;\r\n\r\n    if (!changes.imask || !this._viewInitialized) return;\r\n\r\n    if (this.imask) {\r\n      if (this.maskRef) this.maskRef.updateOptions(this.imask);\r\n      else {\r\n        this.initMask();\r\n        this.onChange(this.maskValue);\r\n      }\r\n    } else {\r\n      this.destroyMask();\r\n    }\r\n  }\r\n\r\n  destroyMask () {\r\n    if (this.maskRef) {\r\n      this.maskRef.destroy();\r\n      delete this.maskRef;\r\n    }\r\n  }\r\n\r\n  ngOnDestroy () {\r\n    this.destroyMask();\r\n    this.accept.complete();\r\n    this.complete.complete();\r\n  }\r\n\r\n  beginWrite (value: any): void {\r\n    this._writing = true;\r\n    this._writingValue = value;\r\n  }\r\n\r\n  endWrite (): any {\r\n    this._writing = false;\r\n    return this._writingValue;\r\n  }\r\n\r\n  writeValue(value: any) {\r\n    value = value == null ? '' : value;\r\n\r\n    if (this.maskRef) {\r\n      this.beginWrite(value);\r\n\r\n      if (this.maskValue !== value ||\r\n        // handle cases like Number('') === 0,\r\n        // for details see https://github.com/uNmAnNeR/imaskjs/issues/134\r\n        (typeof value !== 'string' && this.maskRef.value === '') &&\r\n          !this.maskRef.el.isActive\r\n      ) {\r\n        this.maskValue = value;\r\n      }\r\n    } else {\r\n      this._renderer.setProperty(this.element, 'value', value);\r\n    }\r\n  }\r\n\r\n  _onAccept () {\r\n    const value = this.maskValue;\r\n    // if value was not changed during writing don't fire events\r\n    // for details see https://github.com/uNmAnNeR/imaskjs/issues/136\r\n    if (this._writing && value === this.endWrite()) return;\r\n    this.onChange(value);\r\n    this.accept.emit(value);\r\n  }\r\n\r\n  _onComplete () {\r\n    this.complete.emit(this.maskValue);\r\n  }\r\n\r\n  private initMask () {\r\n    this.maskRef = IMask(this.element, this.imask as Opts)\r\n      .on('accept', this._onAccept.bind(this))\r\n      .on('complete', this._onComplete.bind(this));\r\n  }\r\n\r\n  setDisabledState (isDisabled: boolean) {\r\n    this._renderer.setProperty(this.element, 'disabled', isDisabled)\r\n  }\r\n\r\n  registerOnChange(fn: (_: any) => void): void { this.onChange = fn }\r\n  registerOnTouched(fn: () => void): void { this.onTouched = fn }\r\n\r\n  _handleInput(value: any): void {\r\n    // if mask is attached all input goes throw mask\r\n    if (this.maskRef) return;\r\n\r\n    if (!this._compositionMode || (this._compositionMode && !this._composing)) {\r\n      this.onChange(value);\r\n    }\r\n  }\r\n\r\n  _compositionStart(): void { this._composing = true; }\r\n\r\n  _compositionEnd(value: any): void {\r\n    this._composing = false;\r\n    this._compositionMode && this._handleInput(value);\r\n  }\r\n}\r\n","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\nimport { pipe } from 'imask';\r\nexport { PIPE_TYPE, pipe } from 'imask';\r\n\r\n\r\n/*\r\n * Transforms value through mask\r\n * Takes mask and optionally `from` and `to` pipe types.\r\n * Usage:\r\n *   value | imask:MASK_OR_MASKED:opt_from:opt_to\r\n * Example:\r\n *   {{ 2 | imask:mask }}\r\n*/\r\n@Pipe({name: 'imask'})\r\nexport class IMaskPipe implements PipeTransform {\r\n  transform (...args: Parameters<typeof pipe>): ReturnType<typeof pipe> {\r\n    return pipe(...args);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { IMaskDirective } from './imask.directive';\r\nimport { IMaskPipe } from './imask.pipe';\r\n\r\n\r\n@NgModule({\r\n  imports: [CommonModule],\r\n  declarations: [IMaskDirective, IMaskPipe],\r\n  exports: [IMaskDirective, IMaskPipe]\r\n})\r\nexport class IMaskModule {}\r\n"]}